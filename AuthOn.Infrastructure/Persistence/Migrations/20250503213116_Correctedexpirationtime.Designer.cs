// <auto-generated />
using System;
using AuthOn.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthOn.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250503213116_Correctedexpirationtime")]
    partial class Correctedexpirationtime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthOn.Domain.Entities.EmailStates.EmailState", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EmailStates");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "PENDING"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "SENT"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "FAILED"
                        });
                });

            modelBuilder.Entity("AuthOn.Domain.Entities.Emails.Email", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DestinationEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("EmailStateId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordCreationMoment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecordUpdateMoment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visualized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmailStateId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("AuthOn.Domain.Entities.TokenTypes.TokenType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<int>("ExpirationTimeInHours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TokenTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            ExpirationTimeInHours = 48,
                            Name = "ACTIVATION_TOKEN"
                        });
                });

            modelBuilder.Entity("AuthOn.Domain.Entities.UserTokens.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordCreationMoment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecordUpdateMoment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("TokenTypeId")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TokenTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("AuthOn.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AuthenticationAttempts")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordCreationMoment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecordUpdateMoment")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuthOn.Domain.Entities.Emails.Email", b =>
                {
                    b.HasOne("AuthOn.Domain.Entities.EmailStates.EmailState", "EmailState")
                        .WithMany("Emails")
                        .HasForeignKey("EmailStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmailState");
                });

            modelBuilder.Entity("AuthOn.Domain.Entities.UserTokens.UserToken", b =>
                {
                    b.HasOne("AuthOn.Domain.Entities.TokenTypes.TokenType", "TokenType")
                        .WithMany("UserTokens")
                        .HasForeignKey("TokenTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AuthOn.Domain.Entities.Users.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TokenType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthOn.Domain.Entities.EmailStates.EmailState", b =>
                {
                    b.Navigation("Emails");
                });

            modelBuilder.Entity("AuthOn.Domain.Entities.TokenTypes.TokenType", b =>
                {
                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("AuthOn.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
